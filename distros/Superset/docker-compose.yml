x-superset-image: &superset-image apache/superset:master
x-superset-depends-on: &superset-depends-on
  - db
  - redis
x-superset-volumes: &superset-volumes
  # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./superset/docker:/app/docker
  - superset_home:/app/superset_home

version: '3.7'
# Settings and configurations that are common for all containers

services:
    reverse-proxy:
    # The official v2 Traefik docker image
      image: traefik:v2.2
    # Enables the web UI and tells Traefik to listen to docker
      command:
        - "--api.insecure=true"
        - "--providers.docker=true"
        - "--providers.docker.exposedbydefault=false"
        - --providers.docker.network=traefik
        - "--entrypoints.web.address=:80"
        - "--entrypoints.websecure.address=:443"
        - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
        - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
        - "--entrypoints.web.http.redirections.entryPoint.priority=10" # disable permanent forwarding for every route
        - "--certificatesresolvers.myresolver.acme.tlschallenge=true" # <== Enable TLS-ALPN-01 to generate and renew ACME certs
        - "--certificatesresolvers.myresolver.acme.email=${useremail}"
        - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
        - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      ports:
        # The HTTP port
        - "80:80"
        # The HTTPS port
        - "443:443"
        # The Web UI (enabled by --api.insecure=true)
        - "8089:8080"
      volumes:
        # So that Traefik can listen to the Docker events
        - /var/run/docker.sock:/var/run/docker.sock
        # volume to store letsencrypt certificates
        - "./letsencrypt:/letsencrypt"
      networks:
        - traefik

    fuseki:
      networks:
        - traefik
      image: stain/jena-fuseki
      container_name: skosmos-fuseki
      environment:
        - ADMIN_PASSWORD=admin
        - JVM_ARGS=-Xmx6g
          #--config=/data/skosmos.ttl
        - FUSEKI_DATASET_1=skosmos
        - FUSEKI_ADDITIONAL_ARGS=/data/jena-text.jar
      ports:
       - 3030:3030
    # You can uncomment the line below to have a local volume bound onto the container, or
    # visit https://hub.docker.com/r/stain/jena-fuseki/ for other alternatives
    #volumes:
    #    - ./config/config.ttl:/fuseki/config.ttl
    #    - ./config/fuseki-server:/jena-fuseki/fuseki-server
    #    - ./data/fuseki-data:/fuseki/databases
    #    - ./data/fuseki-input:/data
      volumes:
        - type: bind
          source: ./config/skosmos.ttl
          target: /fuseki/configuration/skosmos.ttl
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.fuseki.rule=Host(`fuseki.${traefikhost}`)"
        - "traefik.http.services.fuseki.loadbalancer.server.port=3030"
        - "traefik.http.routers.fuseki.tls=true"
        - "traefik.http.routers.fuseki.tls.certresolver=myresolver"

    fuseki-cache:
      networks:
        - traefik
      container_name: skosmos-fuseki-cache
      hostname: fuseki-cache
      image: varnish
      ports:
        - 9031:80
      volumes:
        - type: bind
          source: ./Skosmos/dockerfiles/config/varnish-default.vcl
          target: /etc/varnish/default.vcl

    skosmos:
      networks:
        - traefik
      container_name: skosmos
      build:
        context: ./Skosmos
        dockerfile: dockerfiles/Dockerfile.ubuntu
        #volumes:
              #  - .:/var/www/html
      volumes:
        - type: bind
          source: ./config/config-docker-compose.ttl
          target: /var/www/html/config.ttl
      ports:
        - 8000:80
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.skosmos.rule=Host(`skosmos.${traefikhost}`)"
        - "traefik.http.services.skosmos.loadbalancer.server.port=80"
        - "traefik.http.routers.skosmos.tls=true"
        - "traefik.http.routers.skosmos.tls.certresolver=myresolver"
      depends_on:
        - fuseki

    postgres:
      networks:
        - traefik
      container_name: postgres
      ports:
        - "5433:5432"
      image: postgres:10.13
      restart: unless-stopped

      environment:
        - "LC_ALL=C.UTF-8"
        - "POSTGRES_DB"
        - "POSTGRES_USER"
        - "POSTGRES_PASSWORD"
        - "POSTGRES_PORT"
      volumes:
        - ./database-data:/var/lib/postgresql/data/ # persist data even if container shuts down
        - ./triggers:/triggers

    ddiconverter:
      networks:
        - traefik
      image: coronawhy/ddi-converter-tool
      ports:
        - "8520:8520"
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.ddiconverter.rule=Host(`coapi.${traefikhost}`)"
        - "traefik.http.services.ddiconverter.loadbalancer.server.port=8520"
        - "traefik.http.routers.ddiconverter.tls=true"
        - "traefik.http.routers.ddiconverter.tls.certresolver=myresolver"

    jupyter:
      networks:
        - traefik
      image: coronawhy/jupyter-semantics:latest
      volumes:
        - ./var/jupyter/repo:/home/jovyan/work
      environment:
        - "JUPYTERHUB_1API_TOKEN=test_for_local"
      user:
        "root"
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.jupyter.rule=Host(`jupyter.${traefikhost}`)"
        - "traefik.http.services.jupyter.loadbalancer.server.port=8888"
        - "traefik.http.routers.jupyter.tls=true"
        - "traefik.http.routers.jupyter.tls.certresolver=myresolver"

    datatags:
      networks:
        - traefik
      image: coronawhy/datatags:latest
      labels:
        - "traefik.enable=true"
          # - "traefik.http.routers.datatags.entrypoints=web"
        - "traefik.http.routers.datatags.rule=Host(`datatags.${traefikhost}`)"
        - "traefik.http.services.datatags.loadbalancer.server.port=8888"
        - "traefik.http.routers.datatags.tls=true"
        - "traefik.http.routers.datatags.tls.certresolver=myresolver"  

    fuji:
      networks:
        - traefik
      image: coronawhy/fuji:latest
      ports:
        - "8088:1071"
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.fuji.rule=Host(`fuji.${traefikhost}`)"
        - "traefik.http.services.fuji.loadbalancer.server.port=1079"
        - "traefik.http.routers.fuji.tls=true"
        - "traefik.http.routers.fuji.tls.certresolver=myresolver"

    solr:
      networks:
        - traefik
      image: coronawhy/solr:8.9.0
      container_name: solr
      privileged: true
      ports:
        - "8983:8983"
      environment:
        - "SOLR_HOST=solr"
        - "SOLR_PORT=8983"
        - "SOLR_JAVA_MEM=-Xms1g -Xmx1g"
        - "SOLR_OPTS=-Dlog4j2.formatMsgNoLookups=true"
      volumes:
        - solr-data:/opt/solr/server/solr/collection1/data
        - ./config/schema.xml:/var/solr/data/collection1/conf/schema.xml
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.solr.rule=Host(`solr.${traefikhost}`)"
        - "traefik.http.services.solr.loadbalancer.server.port=8983"
        - "traefik.http.routers.solr.tls=true"
        - "traefik.http.routers.solr.tls.certresolver=myresolver"  

    minio:
      # Please use fixed versions :D
      image: minio/minio:RELEASE.2021-10-06T23-36-31Z
      networks:
        - traefik
      volumes:
        - ./minio-data:/data
      command:
        - server
        - /data
        - --console-address
        - ":9001"
      environment:
        - MINIO_ROOT_USER=love
        - MINIO_ROOT_PASSWORD=love1234
        # Do NOT use MINIO_DOMAIN or MINIO_SERVER_URL with Traefik.
        # All Routing is done by Traefik, just tell minio where to redirect to.
        - MINIO_BROWSER_REDIRECT_URL=http://stash.localhost
      deploy:
        labels:
          - traefik.enable=true
          - traefik.http.routers.minio.service=minio
          - traefik.http.routers.minio.rule=Host(`minio.${traefikhost}`)
          - traefik.http.services.minio.loadbalancer.server.port=9000
          - traefik.http.routers.minio-console.service=minio-console
          - traefik.http.routers.minio-console.rule=Host(`minio-stash.${traefikhost}`)
          - traefik.http.services.minio-console.loadbalancer.server.port=9001

    whoami:
      networks:
        - traefik
      image: "containous/whoami"
      container_name: "whoami"
      labels:
        - "traefik.enable=true"
          # - "traefik.http.routers.whoami.entrypoints=web"
        - "traefik.http.routers.whoami.rule=Host(`whoami.${traefikhost}`)"
        - "traefik.http.routers.whoami.tls=true"
        - "traefik.http.routers.whoami.tls.certresolver=myresolver"  

    dataverse:
      networks:
        - traefik
      image: coronawhy/dataverse:${VERSION}
      container_name: dataverse
      privileged: true
      user:
        "root"
      ports:
        #- "443:443"
        - "4848:4848"
        - "8080:8080"
      environment:
        - "CVM_SERVER_NAME=CESSDA" #Optional
        - "WEBHOOK"
        - "CESSDA"
        - "CLARIN"
        - "doi_authority"
        - "doi_provider"
        - "doi_username"
        - "doi_password"
        - "dataciterestapiurlstring"
        - "baseurlstring"
        - "aws_bucket_name"
        - "aws_s3_profile"
        - "aws_endpoint_url"
        - "system_email"
        - "mailhost"
        - "mailuser"
        - "no_reply_email"
        - "smtp_password"
        - "smtp_port"
        - "socket_port"
        - "federated_json_file"
        - "bucketname_1"
        - "minio_label_1"
        - "minio_bucket_1"
        - "bucketname_2"
        - "minio_profile_1"
        - "minio_label_2"
        - "minio_bucket_2"
        - "minio_profile_2"
        - "DATAVERSE_DB_HOST"
        - "DATAVERSE_DB_USER"
        - "DATAVERSE_DB_PASSWORD"
        - "DATAVERSE_DB_NAME"
        - "DATAVERSE_SERVICE_HOST"
        - "DATAVERSE_URL"
        - "SOLR_SERVICE_HOST"
        - "SOLR_SERVICE_PORT"
        - "CVM_SERVER_URL=https://ns.${traefikhost}"
        - "LANG=en"
        - "cvManager=http://"
        - "BUNDLEPROPERTIES=Bundle.properties"
        - "ADMIN_EMAIL=admin@localhost"
        - "MAIL_SERVER=mailrelay"
        - "SOLR_LOCATION=solr:8983"
        - "INIT_SCRIPTS_FOLDER"
        - "hostname"
        - "MAINLANG"
        - "POSTGRES_SERVER"
        - "POSTGRES_PORT"
        - "POSTGRES_DATABASE"
        - "POSTGRES_USER"
        - "POSTGRES_PASSWORD"
        - "PGPASSWORD"
        - "TWORAVENS_LOCATION=NOT INSTALLED"
        - "RSERVE_HOST=localhost"
        - "RSERVE_PORT=6311"
        - "RSERVE_USER=rserve"
        - "RSERVE_PASSWORD=rserve"
        - "JVM_OPTS='-Xmx1g -Xms1g -XX:MaxPermSize=2g -XX:PermSize=2g'"
      depends_on:
        - postgres
        - solr
      volumes:
        - ./secrets:/secrets
        - ./data:/data
        - ./docroot:/opt/docroot
        - ./init.d:/opt/payara/init.d
        - ./triggers:/opt/payara/triggers
        - ./config/schema.xml:/opt/payara/dvinstall/schema.xml
      #  - dataverse-data:/usr/local/payara5/glassfish/domains/domain1/autodeploy
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.dataverse.rule=Host(`www.${traefikhost}`)"
        - "traefik.http.services.dataverse.loadbalancer.server.port=8080"
        - "traefik.http.routers.dataverse.tls=true"
        - "traefik.http.routers.dataverse.tls.certresolver=myresolver"  

    redis:
      networks:
        - traefik
      image: redis:latest
      container_name: superset_cache
      restart: unless-stopped
      volumes:
        - redis:/data

    db:
      networks:
        - traefik
      env_file: superset/docker/.env-non-dev
      image: postgres:10
      container_name: superset_db
      restart: unless-stopped
      volumes:
        - ./data/db_home:/var/lib/postgresql/data

    superset:
      networks:
        - traefik
      env_file: superset/docker/.env-non-dev
      image: *superset-image
      container_name: superset_app
      command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
      user: "root"
      restart: unless-stopped
      ports:
        - 8087:8088
      depends_on: *superset-depends-on
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.superset.rule=Host(`superset.mediaquantum.eu`)"
        - "traefik.http.services.superset.loadbalancer.server.port=8088"
        - "traefik.http.routers.superset.tls=true"
        - "traefik.http.routers.superset.tls.certresolver=myresolver"

      volumes: *superset-volumes

    superset-init:
      networks:
        - traefik
      image: *superset-image
      container_name: superset_init
      command: ["/app/docker/docker-init.sh"]
      env_file: superset/docker/.env-non-dev
      depends_on: *superset-depends-on
      user: "root"
      volumes: *superset-volumes

    superset-worker:
      networks:
        - traefik
      image: *superset-image
      container_name: superset_worker
      command: ["/app/docker/docker-bootstrap.sh", "worker"]
      env_file: superset/docker/.env-non-dev
      restart: unless-stopped
      depends_on: *superset-depends-on
      user: "root"
      volumes: *superset-volumes

    superset-worker-beat:
      networks:
        - traefik
      image: *superset-image
      container_name: superset_worker_beat
      command: ["/app/docker/docker-bootstrap.sh", "beat"]
      env_file: superset/docker/.env-non-dev
      restart: unless-stopped
      depends_on: *superset-depends-on
      user: "root"
      volumes: *superset-volumes

    trino:
      networks:
        - traefik
      image: 'trinodb/trino:latest'
      hostname: trino-coordinator
      ports:
        - '8082:8080'
      volumes:
        - ./trinoetc:/etc/trino

    drill:
      networks:
        - traefik
      image: apache/drill:latest
      ports:
        - "8047:8047"
      stdin_open: true  # add this line
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.drill.rule=Host(`drill.${traefikhost}`)"
        - "traefik.http.services.drill.loadbalancer.server.port=8047"
        - "traefik.http.routers.drill.tls=true"
        - "traefik.http.routers.drill.tls.certresolver=myresolver"
volumes:
  superset_home:
    external: false
  database-data:
  solr-data:
  dataverse-data:
  data1-1:
  redis:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2:

networks:
  traefik:
    external: true
