"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FieldTypeClass_1 = require("../@types/FieldTypeClass");
exports.METADATA_BLOCK_FIELD_TITLE = 'title';
exports.METADATA_BLOCK_FIELD_SUBTITLE = 'subtitle';
exports.METADATA_BLOCK_FIELD_AUTHOR = 'author';
exports.METADATA_BLOCK_FIELD_DS_DESCRIPTION = 'dsDescription';
exports.METADATA_BLOCK_FIELD_SUBJECT = 'subject';
exports.METADATA_BLOCK_FIELD_CONTACT = 'datasetContact';
exports.METADATA_BLOCK_FIELD_AUTHOR_FULLNAME = 'authorName';
exports.METADATA_BLOCK_FIELD_AUTHOR_AFFILIATION = 'authorAffiliation';
exports.METADATA_BLOCK_FIELD_CONTACT_EMAIL = 'datasetContactEmail';
exports.METADATA_BLOCK_FIELD_CONTACT_NAME = 'datasetContactName';
var MetadataBlocksUtil = /** @class */ (function () {
    function MetadataBlocksUtil() {
    }
    MetadataBlocksUtil.createTitleField = function (title) {
        return this.createField(exports.METADATA_BLOCK_FIELD_TITLE, FieldTypeClass_1.FieldTypeClass.PRIMITIVE.toString(), false, title);
    };
    MetadataBlocksUtil.createSubtitleField = function (subtitle) {
        return this.createField(exports.METADATA_BLOCK_FIELD_SUBTITLE, FieldTypeClass_1.FieldTypeClass.PRIMITIVE.toString(), false, subtitle);
    };
    MetadataBlocksUtil.createAuthorField = function (basicDatasetAuthors) {
        var authors = [];
        basicDatasetAuthors.forEach(function (basicAuthor) {
            var author = {
                authorName: {
                    value: basicAuthor.fullname,
                    typeClass: FieldTypeClass_1.FieldTypeClass.PRIMITIVE,
                    typeName: exports.METADATA_BLOCK_FIELD_AUTHOR_FULLNAME,
                    multiple: false
                }
            };
            if (basicAuthor.affiliation) {
                author.authorAffiliation = {
                    value: basicAuthor.affiliation,
                    typeClass: FieldTypeClass_1.FieldTypeClass.PRIMITIVE,
                    typeName: exports.METADATA_BLOCK_FIELD_AUTHOR_AFFILIATION,
                    multiple: false
                };
            }
            authors.push(author);
        });
        return this.createField(exports.METADATA_BLOCK_FIELD_AUTHOR, FieldTypeClass_1.FieldTypeClass.COMPOUND.toString(), true, authors);
    };
    MetadataBlocksUtil.createDescriptionField = function (basicDescriptions) {
        var descriptions = [];
        basicDescriptions.forEach(function (description) {
            descriptions.push({
                dsDescriptionValue: {
                    typeName: 'dsDescriptionValue',
                    typeClass: FieldTypeClass_1.FieldTypeClass.PRIMITIVE.toString(),
                    multiple: false,
                    value: description.text
                },
                dsDescriptionDate: {
                    typeName: 'dsDescriptionDate',
                    typeClass: FieldTypeClass_1.FieldTypeClass.PRIMITIVE.toString(),
                    multiple: false,
                    value: description.date
                }
            });
        });
        return this.createField(exports.METADATA_BLOCK_FIELD_DS_DESCRIPTION, FieldTypeClass_1.FieldTypeClass.COMPOUND.toString(), true, descriptions);
    };
    MetadataBlocksUtil.createSubjectField = function (basicSubjects) {
        var subjects = [];
        basicSubjects.forEach(function (subject) {
            subjects.push(subject.toString());
        });
        return this.createField(exports.METADATA_BLOCK_FIELD_SUBJECT, FieldTypeClass_1.FieldTypeClass.CONTROLLED_VOCABULARY.toString(), true, subjects);
    };
    MetadataBlocksUtil.createContactField = function (basicContacts) {
        var contacts = [];
        basicContacts.forEach(function (contact) {
            var input = {};
            if (contact.email) {
                input.datasetContactEmail = {
                    typeClass: FieldTypeClass_1.FieldTypeClass.PRIMITIVE,
                    multiple: false,
                    typeName: exports.METADATA_BLOCK_FIELD_CONTACT_EMAIL,
                    value: contact.email
                };
            }
            if (contact.fullname) {
                input.datasetContactName = {
                    typeClass: FieldTypeClass_1.FieldTypeClass.PRIMITIVE,
                    multiple: false,
                    typeName: exports.METADATA_BLOCK_FIELD_CONTACT_NAME,
                    value: contact.fullname
                };
            }
            contacts.push(input);
        });
        return this.createField(exports.METADATA_BLOCK_FIELD_CONTACT, FieldTypeClass_1.FieldTypeClass.COMPOUND.toString(), true, contacts);
    };
    MetadataBlocksUtil.createField = function (typeName, typeClass, multiple, value) {
        return {
            typeName: typeName,
            typeClass: typeClass,
            multiple: multiple,
            value: value
        };
    };
    return MetadataBlocksUtil;
}());
exports.MetadataBlocksUtil = MetadataBlocksUtil;
//# sourceMappingURL=metadataBlocksUtil.js.map