/// <reference types="node" />
import { AxiosResponse } from 'axios';
import { SearchOptions } from './@types/searchOptions';
import { DataverseHeaders } from './@types/dataverseHeaders';
import { DataverseMetricType } from './@types/dataverseMetricType';
import { BasicDatasetInformation } from './@types/basicDataset';
import { DatasetVersionUpgradeType } from './@types/datasetVersionUpgradeType';
export declare class DataverseClient {
    private readonly host;
    private readonly apiToken;
    constructor(host: string, apiToken?: string);
    getDataverseInformation(dataverseAlias: string): Promise<AxiosResponse>;
    listDatasets(dataverseAlias: string): Promise<AxiosResponse>;
    addDataset(dataverseAlias: string, payload: string): Promise<AxiosResponse>;
    addBasicDataset(dataverseAlias: string, datasetInformation: BasicDatasetInformation): Promise<AxiosResponse>;
    search(options: SearchOptions, headers?: DataverseHeaders): Promise<AxiosResponse>;
    searchOnlyPublished(options: SearchOptions): Promise<AxiosResponse>;
    getFile(fileId: string, getOriginal?: boolean): Promise<AxiosResponse>;
    getFileMetadata(fileId: string, draftVersion?: boolean): Promise<AxiosResponse>;
    getLatestDatasetInformation(datasetId: string): Promise<AxiosResponse>;
    getLatestPublishedDatasetVersion(datasetId: string): Promise<AxiosResponse>;
    getDraftDatasetVersion(datasetId: string): Promise<AxiosResponse>;
    getLatestDatasetInformationFromDOI(doi: string): Promise<AxiosResponse>;
    getDatasetVersions(datasetId: string): Promise<AxiosResponse>;
    getDatasetVersion(datasetId: string, version: string): Promise<AxiosResponse>;
    getDatasetThumbnail(datasetId: string): Promise<AxiosResponse>;
    uploadDatasetThumbnail(datasetId: string, imageBuffer: Buffer): Promise<any>;
    listDataverseRoleAssignments(dataverseAlias: string): Promise<AxiosResponse>;
    listDataverseGroups(dataverseId: string): Promise<AxiosResponse>;
    getMetric(datasetId: string, metricType: DataverseMetricType, yearMonth?: string): Promise<AxiosResponse>;
    getMetricByCountry(datasetId: string, metricType: DataverseMetricType, countryCode?: string, yearMonth?: string): Promise<AxiosResponse>;
    replaceFile(fileId: string, filename: string, fileBuffer: Buffer, jsonData?: object): Promise<any>;
    publishDataset(datasetId: string, versionUpgradeType?: DatasetVersionUpgradeType): Promise<AxiosResponse>;
    updateDataset(datasetId: string, datasetInformation: BasicDatasetInformation): Promise<AxiosResponse>;
    deleteDataset(datasetId: string): Promise<AxiosResponse>;
    getDatasetFiles(datasetId: string): Promise<AxiosResponse>;
    private getRequest;
    private postRequest;
    private putRequest;
    private deleteRequest;
    private getHeaders;
    private mapSearchOptions;
}
